#include "Map.h"
static int stage1data[MAP_HEIGHT][MAP_WIDTH] = {
    {5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5,5,5,5,5,5,5,5,5},//1
    {5,1,1,1,1,1,1,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5},//2
    {5,1,1,1,1,1,1,5,5,7,7,7,7,7,2,7,7,7,7,7,7,7,7,5},//3
    {5,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5},//4
    {5,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5},//5
    {5,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5},//6
    {5,4,6,2,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5},//7
    {5,5,6,2,5,5,5,5,5,2,7,7,7,7,7,7,7,7,7,7,7,7,7,5},//8
    {5,5,6,2,5,5,5,5,5,2,2,2,2,2,2,1,1,1,1,1,1,1,1,5},//9
    {5,7,7,2,7,7,7,7,7,7,5,5,5,5,5,1,1,1,1,1,1,1,1,5},//10
    {5,1,1,1,1,1,1,1,1,1,7,7,7,7,7,1,1,1,1,1,1,1,1,5},//11
    {5,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,5},//12
    {5,1,1,1,1,1,1,1,1,1,7,7,7,7,7,1,1,1,1,1,1,1,1,5},//13
    {5,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,5},//14
    {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},//15
};
static int stage2data[MAP_HEIGHT][MAP_WIDTH] = {
    {5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5},//1
    {5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,2,1,1,1,1,1,1,1,5},//2
    {5,1,1,1,1,1,1,1,7,1,1,1,1,1,1,5,1,1,1,1,1,1,1,5},//3
    {5,1,1,1,1,1,1,1,2,1,1,1,1,1,1,5,1,1,1,1,1,1,1,5},//4
    {5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,5,1,1,1,1,1,1,1,5},//5
    {5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,7,7,7,7,7,7,7,2,5},//6
    {5,2,7,7,7,7,7,7,5,1,1,1,1,1,1,2,2,2,2,2,2,2,2,5},//7
    {5,2,2,2,2,2,2,2,5,1,1,1,1,1,1,5,5,5,5,5,5,5,2,5},//8
    {5,7,7,7,7,7,7,2,5,7,7,2,7,7,7,5,5,7,7,7,7,7,2,5},//9
    {5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,5,5,1,1,1,1,1,1,5},//10
    {5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,5,5,1,1,1,1,1,1,5},//11
    {5,1,1,1,1,1,1,1,7,1,1,1,1,1,1,5,5,1,1,1,1,1,1,5},//12
    {5,1,1,1,1,1,1,1,2,1,1,1,1,1,1,7,7,1,1,1,1,1,1,5},//13
    {5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,2,2,1,1,1,1,1,1,5},//14
    {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},//15
};
static int stage3data[MAP_HEIGHT][MAP_WIDTH] = {
    {5,7,7,7,7,7,7,7,5,7,7,7,7,7,7,7,5,7,7,7,7,7,7,5},//1
    {5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,5},//2
    {5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,5},//3
    {5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,5},//4
    {5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,5},//5
    {5,2,7,7,7,7,7,7,7,7,7,7,2,7,7,7,7,7,7,7,7,7,2,5},//6
    {5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5},//7
    {5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5},//8
    {5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5},//9
    {5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5},//10
    {5,2,7,7,7,7,7,7,5,7,7,7,2,7,7,7,5,7,7,7,7,7,2,5},//11
    {5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,5},//12
    {5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,5},//13
    {5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,5},//14
    {5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,5},//15
    {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},//16
};
static int stage4data[MAP_HEIGHT][MAP_WIDTH] = {
    {5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5},//1
    {5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5},//2
    {5,2,5,7,7,2,7,7,7,7,5,7,7,7,7,7,7,2,7,7,7,5,2,5},//3
    {5,2,5,1,1,1,1,1,1,1,5,2,2,1,1,1,1,1,1,1,1,7,2,5},//4
    {5,2,7,1,1,1,1,1,1,1,5,2,5,1,1,1,1,1,1,1,1,2,2,5},//5
    {5,2,2,1,1,1,1,1,1,1,7,2,5,1,1,1,1,1,1,1,1,5,2,5},//6
    {5,2,5,1,1,1,1,1,1,1,2,2,5,1,1,1,1,1,1,1,1,5,2,5},//7
    {5,2,5,2,7,7,7,7,7,7,7,7,7,7,7,2,7,7,7,7,7,5,2,5},//8
    {5,2,5,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,5,2,5},//9
    {5,2,5,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,7,2,5},//10
    {5,2,5,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,2,2,5},//11
    {5,2,5,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,5,2,5},//12
    {5,2,7,7,7,7,2,7,7,7,7,7,7,7,7,2,7,7,7,7,7,7,2,5},//13
    {5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5},//14
    {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},//15
};
static int stage5data[MAP_HEIGHT][MAP_WIDTH] = {
    {5,5,5,5,5,7,7,7,7,7,7,7,7,7,7,7,7,7,5,5,5,5,5,5},//1
    {5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5},//2
    {5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5},//3
    {5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5},//4
    {5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5},//5
    {5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5},//6
    {5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5},//7
    {5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5},//8
    {5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5},//9
    {5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5},//10
    {5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5},//11
    {5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5},//12
    {5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5},//13
    {5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5},//14
    {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},//15
};

Map::Map(int stageNunber) :Base(eType_Map)
{
    //画像の複製;
    m_img = COPY_RESOURCE("Map_Tip1", CImage);
    m_img.mp_texture->SetFilter(GL_NEAREST);
    //m_img = COPY_RESOURCE("Map_Tip2", CImage);
    switch (stageNunber) {
    case 1:
        memcpy(stage, stage1data, sizeof(stage1data));
        break;
    case 2:
       memcpy(stage, stage2data, sizeof(stage2data));
        break;
    case 3:
        memcpy(stage, stage3data, sizeof(stage3data));
        break;
    case 4:
        memcpy(stage, stage4data, sizeof(stage4data));
        break;
    case 5:
        memcpy(stage, stage5data, sizeof(stage5data));
        break;
    }
    m_stageNunber = stageNunber;
    //m_Map_Tip = 900;
    
}

void Map::Draw()
{
    //m_background.Draw();
    for (int i = 0; i < MAP_HEIGHT; i++) {
        for (int j = 0; j < MAP_WIDTH; j++) {
            //表示させない [i]行 [j]列
            if (stage[i][j] == 0)continue;
            int t = stage[i][j];
            //切り抜き    //左　  //ue  //migi       //sita
            m_img.SetRect(30 * t,  0,  30 * t+30,  30);
            //サイズ
            m_img.SetSize(MAP_TIP_SIZE, MAP_TIP_SIZE);


            //位置設定
            m_img.SetPos(MAP_TIP_SIZE * j - m_scroll.x, MAP_TIP_SIZE * i - m_scroll.y);
            //描画
            m_img.Draw();
        }
    }

}


int Map::GetTip(const CVector2D& pos, int* tx, int* ty)
{
    //列を計算
    int x = pos.x / MAP_TIP_SIZE;
    //列の制限
    if (x < 0) x = 0;
    if (x > MAP_WIDTH - 1) x = MAP_WIDTH - 1;
    //行を計算
    int y = pos.y / MAP_TIP_SIZE;
    //行の制限
    if (y < 0) y = 0;
    if (y > MAP_HEIGHT - 1) y = MAP_HEIGHT - 1;
    //行と列の出力
    if (ty) *ty = y * MAP_TIP_SIZE;
    if (tx) *tx = x * MAP_TIP_SIZE;
    //チップデータを返却
    return stage[y][x];
}
int Map::GetTip(int x, int y)
{
    return stage[y][x];

}

int Map::CollisionPoint(const CVector2D& pos)
{


    //1点のみ検証
    int t = GetTip(pos);
    if (t != 0)return 1;
    return 0;
}

int Map::CollisionRect(const CVector2D& pos, const CRect& rect)
{
    CRect r = CRect(
        pos.x + rect.m_left,
        pos.y + rect.m_top,
        pos.x + rect.m_right,
        pos.y + rect.m_bottom);
    int t;
    t = GetTip(CVector2D(r.m_left, r.m_top));
    if (t >= 5) return t;
    t = GetTip(CVector2D(r.m_right, r.m_top));
    if (t >= 5) return t;
    t = GetTip(CVector2D(r.m_left, r.m_bottom));
    if (t >= 5) return t;
    t = GetTip(CVector2D(r.m_right, r.m_bottom));
    if (t >= 5) return t;
    return 0;
}
